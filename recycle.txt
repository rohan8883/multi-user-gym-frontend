
hello
const handleAddSub = async () => {
    Confirm(
      'Are you sure?',
      'Do you want to add or renewal subscription?',
      async () => {
        try {
          const result = await subscriptionMutate.mutateAsync({
            api: gymApi.createSubscription,
            data: {
              memberId: id,
              subscriptionData: getMemberDetail.data?.data?.planMappingId.map(
                (item) => ({
                  planMappingId: item._id
                })
              ),
              customStartDate: customDate ?? moment().toISOString()
            }
          });
          if (result.data.success) {
            toast.success(result.data.message);
            getMemberDetail.refetch();
          } else {
            toast.error(result.data.message);
          }
        } catch (err) {
          toast.error('Something went wrong');
        }
      }
    );
  };






  =======================================================
  import { useEffect, useState } from 'react';
import Page from '@/components/helmet-page';
import { IndianRupee, Pencil, User } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { useAuth } from '@/store/useAuth';
import moment from 'moment';
import { Link } from 'react-router-dom';
import { useApi } from '@/hooks/useCustomQuery';
import { gymApi } from '@/lib';
import { I_COUNT_TYPE, I_SUB_EXP_TYPE } from './type';
import Spinner from '@/components/loaders/Spinner';

const CARDDATA = [
  {
    title: 'Total Amount',
    amount: 300,
    color: 'text-blue-500',
    bg: 'bg-blue-300/10',
    paidStatus: ''
  },
  {
    title: 'Total Paid',
    amount: 200,
    color: 'text-green-500',
    bg: 'bg-green-300/10',
    paidStatus: 1
  },
  {
    title: 'Total Due',
    amount: 100,
    color: 'text-red-500',
    bg: 'bg-red-300/10',
    paidStatus: 0
  },
  {
    title: 'Expired Sub',
    amount: 500,
    color: 'text-yellow-500',
    bg: 'bg-yellow-300/10',
    paidStatus: ''
  }
];

export default function Home() {
  const { user } = useAuth();
  const [cardData, setCardData] = useState<
    {
      title: string;
      amount: number | null;
      color: string;
      bg: string;
      paidStatus?: number | string;
    }[]
  >([]);
  const [memberCount, setMemberCount] = useState<
    { title: string; amount: number | null; color: string; bg: string }[]
  >([]);
  const countData = useApi<I_COUNT_TYPE>({
    api: gymApi.getCount,
    key: 'countData',
    options: { enabled: true }
  });

  const expList = useApi<I_SUB_EXP_TYPE>({
    api: gymApi.getExpSubBeforeSevenDat,
    key: 'expiresList',
    options: { enabled: true }
  });

  useEffect(() => {
    if (countData?.data) {
      const newData = CARDDATA.map((data) => {
        if (data.title === 'Total Due') {
          return { ...data, amount: countData.data?.data?.totalDueAmount };
        } else if (data.title === 'Total Paid') {
          return { ...data, amount: countData.data?.data?.totalPaidAmount };
        } else if (data.title === 'Total Amount') {
          return { ...data, amount: countData.data?.data?.totalAmount };
        } else if (data.title === 'Expired Sub') {
          return { ...data, amount: countData.data?.data?.expiredSub };
        }
        return data;
      });
      setCardData(newData);
      //
      const memberCount = [
        {
          title: 'Total Members',
          amount:
            countData.data?.data?.activeMember! +
              countData.data?.data?.inActiveMember! || 0,
          color: 'text-blue-500',
          bg: 'bg-blue-300/10'
        },
        {
          title: 'Active Members',
          amount: countData.data?.data?.activeMember ?? 0,
          color: 'text-green-500',
          bg: 'bg-green-300/10'
        },
        {
          title: 'InActive Members',
          amount: countData.data?.data?.inActiveMember ?? 0,
          color: 'text-red-500',
          bg: 'bg-red-300/10'
        }
      ];
      setMemberCount(memberCount);
    }
  }, [countData?.data]);

  if (countData.isLoading || expList.isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <Spinner />
      </div>
    );
  }

  return (
    <Page title="Home">
      <div className="flex items-center justify-between mt-4">
        <div className="flex items-center gap-4">
          <Avatar className="w-16 h-16">
            <AvatarImage src={user?.imgFullPath} alt="@shadcn" />
            <AvatarFallback className="text-xl text-primary">
              {user?.fullName?.charAt(0).toUpperCase()}
            </AvatarFallback>
          </Avatar>
          <div>
            <h1 className="text-primary font-bold">{user?.fullName}</h1>
            <small className="text-muted-foreground">{user?.email}</small>
          </div>
        </div>
        <Card className="shadow-none rounded-xl bg-secondary">
          <div className="flex items-center gap-4 p-3">
            <Pencil size={20} className="text-primary" />
          </div>
        </Card>
      </div>

      <div className="flex justify-between items-center py-2 mt-5">
        <h1 className="text-base font-semibold text-foreground">Dashboard</h1>
        {/* some icon */}

        <Link to="/gym-app/member-list" className="flex items-center gap-4">
          <span className="text-sm font-semibold text-muted-foreground">
            Total Members
          </span>
          <span className="text-primary font-bold">500</span>
        </Link>
      </div>
      <div className="grid grid-cols-3 gap-4 sm:grid-cols-2 md:grid-cols-4">
        {memberCount?.map((data, index) => (
          <Card
            key={index + 1}
            className={`shadow-none rounded-2xl ${data.bg}`}
          >
            <div className="px-4 py-5">
              <div className="flex items-center gap-1">
                <User size={20} className={data.color} />
                <span className={`text-lg font-semibold ${data.color}`}>
                  {data.amount}
                </span>
              </div>
              <h1 className="text-xs font-semibold">{data.title}</h1>
            </div>
          </Card>
        ))}
      </div>
      {/* line */}
      <div className="border-t border-gray-200 mt-3 mb-3"></div>
      {/* card data */}
      <div className="grid grid-cols-2 gap-4 sm:grid-cols-2 md:grid-cols-4">
        {cardData?.map((data, index) => (
          <Link
            to={`/gym-app/payment-list?paymentstatus=${data.paidStatus}`}
            key={index + 1}
          >
            <Card
              key={index + 1}
              className={`shadow-none rounded-2xl ${data.bg}`}
            >
              <div className="px-4 py-5">
                <div className="flex items-center gap-0">
                  <IndianRupee size={20} className={data.color} />
                  <span className={`text-lg font-semibold ${data.color}`}>
                    {data.amount}
                  </span>
                </div>
                <h1 className="text-sm font-semibold">{data.title}</h1>
              </div>
            </Card>
          </Link>
        ))}
      </div>
      {/* line */}
      <div className="border-t border-gray-100 mt-5"></div>
      {/* member list */}
      <div className="mt-3">
        <div className="flex justify-between items-center">
          <h1 className="text-base font-semibold text-foreground">
            Today Expired Members ({expList?.data?.data?.length})
          </h1>
          {/* some icon */}
          <div className="flex items-center justify-center gap-1">
            <Link to="/gym-app/expired-list" className="text-primary">
              <small className="text-primary font-bold">View All</small>
            </Link>
          </div>
        </div>
        <div className="grid grid-cols-1 gap-3 mt-2">
          {expList?.data?.data?.map((data, index) => (
            <Card
              key={index + 1}
              className=" shadow-none rounded-2xl bg-secondary"
            >
              <div className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <Avatar className="w-12 h-12 border dark:border-gray-700 ">
                      <AvatarFallback className="text-base text-primary">
                        {data.member?.memberName.charAt(0).toUpperCase()}
                      </AvatarFallback>
                    </Avatar>
                    <div>
                      <h1 className="text-primary font-semibold text-sm">
                        {data.member?.memberName}
                      </h1>
                      {/* <small className="text-muted-foreground text-xs">
                        {data.email}
                      </small> */}
                      <div className="text-primary font-semibold text-xs">
                        <small className="text-muted-foreground">
                          Phone: {data.member?.mobile}
                        </small>
                      </div>
                    </div>
                  </div>
                  <div>
                    {/* using moment  */}
                    <h1 className="text-primary font-semibold text-sm">
                      {moment(data.endDate).format('DD-MMM-YY')}
                    </h1>
                    <small className="text-muted-foreground text-sm">
                      Expire Date
                    </small>
                  </div>
                </div>
                {/* <div className="flex items-center justify-between mt-4">
                  <div>
                    <h1 className="text-primary font-semibold">{data.phone}</h1>
                    <small className="text-muted-foreground">Phone</small>
                  </div>
                  <div>
                    <h1 className="text-primary font-semibold">{data.total}</h1>
                    <small className="text-muted-foreground">Total</small>
                  </div>
                  <div>
                    <h1 className="text-primary font-semibold">{data.paid}</h1>
                    <small className="text-muted-foreground">Paid</small>
                  </div>
                  <div>
                    <h1 className="text-primary font-semibold">{data.due}</h1>
                    <small className="text-muted-foreground">Due</small>
                  </div>
                </div> */}
              </div>
            </Card>
          ))}
        </div>
      </div>
    </Page>
  );
}

================================================
<div className="grid grid-cols-1 gap-3 mt-2">
          {memberListData.data?.data?.docs.map((data) => (
            <Card
              key={data._id}
              className=" shadow-none rounded-2xl bg-secondary"
            >
              <div className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div>
                      <h1 className="text-base font-semibold text-foreground">
                        Name-: {data.memberName}
                      </h1>
                      <small className="text-sm font-semibold text-muted-foreground">
                        Email-: {data.email}
                      </small>
                      <div>
                        <h1 className="text-sm font-semibold text-muted-foreground">
                          Mobile-: {data.mobile}
                        </h1>
                        {/* with join comma*/}
                        <h1 className="text-sm font-semibold text-muted-foreground">
                          Plan-:{' '}
                          {data.planMappingId
                            .map((plan) => plan.plan)
                            .join(', ')}
                        </h1>
                      </div>
                    </div>
                  </div>
                  {/* menu bar */}
                  <div className="flex flex-col gap-3">
                    <div>
                      <Button
                        size={'sm'}
                        className="bg-blue-100 text-white rounded-xl"
                        onClick={() =>
                          navigate(`/gym-app/view-member/${data._id}`)
                        }
                      >
                        <Eye size={15} className="text-blue-600" />
                      </Button>
                    </div>
                    <div>
                      <Button
                        size={'sm'}
                        className="bg-green-100 text-white rounded-xl"
                        onClick={() =>
                          navigate(`/gym-app/update-member/${data._id}`)
                        }
                      >
                        <PencilIcon size={15} className="text-green-600" />
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </Card>
          ))}
        </div>




        =====================================================================================================


        <>
              {getMemberDetail.data?.data?.subscription?.map((data, index) => (
                <Card key={index + 1} className="mt-2 p-4">
                  <div className="flex justify-between items-center">
                    <Badge className="bg-secondary text-primary">
                      {data.planName}
                      {/* space */}
                      <span className="ml-1"></span>
                      <small className="text-xs font-semibold text-primary">
                        ({data.month} month)
                      </small>
                    </Badge>

                    {getMemberDetail?.data?.data?.ExpStatus?.find(
                      (exp) => exp.subsId == data._id
                    ) ? (
                      moment(data.endDate).diff(moment(), 'days') < 0 ? (
                        <span className="text-red-500 text-xs font-semibold">
                          Expired
                        </span>
                      ) : (
                        <span className="text-green-500 text-xs font-semibold">
                          {moment(data.endDate).diff(moment(), 'days') +
                            ' days left'}
                        </span>
                      )
                    ) : (
                      <span className="text-blue-500 text-xs font-semibold">
                        Old Subscription
                      </span>
                    )}

                    {data.paidStatus == 0 && (
                      <Trash
                        className="h-4 w-4 cursor-pointer text-red-600"
                        onClick={() => handleDeleteSub(data._id)}
                      />
                    )}
                  </div>
                  {/* line */}
                  <div className="border-t border-secondary mt-3 mb-1"></div>
                  <div className="grid grid-cols-4 gap-2.5">
                    <div className="col-span-2">
                      <h1 className="text-xs font-semibold text-muted-foreground">
                        Start Date
                      </h1>
                      <h1 className="text-xs font-semibold">
                        {moment(data.startDate).format('DD-MMM-YYYY')}
                      </h1>
                    </div>
                    <div className="col-span-2">
                      <h1 className="text-xs font-semibold text-muted-foreground">
                        End Date
                      </h1>
                      <h1 className="text-xs font-semibold">
                        {moment(data.endDate).format('DD-MMM-YYYY')}
                      </h1>
                    </div>
                    {/* line */}
                    <div className="border-t border-secondary  col-span-4"></div>
                    <div>
                      <h1 className="text-xs font-semibold text-muted-foreground">
                        Amount
                      </h1>
                      <h1 className="text-xs font-semibold">
                        {/* {data?.amount - data?.paidAmount - data?.dueAmount} */}
                        {data?.amount}
                      </h1>
                    </div>
                    <div>
                      <h1 className="text-xs font-semibold text-muted-foreground">
                        Paid
                      </h1>
                      <h1 className="text-xs font-semibold">
                        {data?.paidAmount}
                      </h1>
                    </div>

                    <div>
                      <h1 className="text-xs font-semibold text-muted-foreground">
                        Due
                      </h1>
                      <h1 className="text-xs font-semibold">
                        {data.dueAmount}
                      </h1>
                    </div>
                    <div>
                      <h1 className="text-xs font-semibold text-muted-foreground">
                        Status
                      </h1>
                      {(data.paidStatus === 0 && (
                        <small className="text-red-600 font-bold text-xs">
                          UNPAID
                        </small>
                      )) ||
                        (data.paidStatus === 1 && (
                          <small className="text-green-600 font-bold text-xs">
                            PAID
                          </small>
                        )) ||
                        (data.paidStatus === 2 && (
                          <small className="text-blue-600 font-bold text-xs">
                            DUE
                          </small>
                        ))}
                    </div>
                  </div>
                </Card>
              ))}
            </>